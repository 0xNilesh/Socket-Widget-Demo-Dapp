{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["ethereum","window","App","useState","address","setAddress","provider","setProvider","innerWidth","widthWidget","setWidthWidget","connectWallet","ethers","providers","Web3Provider","send","response","useEffect","on","style","margin","onClick","backgroundColor","padding","Slider","defaultValue","onChange","_","value","Number","valueLabelDisplay","min","max","width","apiKey","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"gQAKIA,EAAYC,OAAeD,SA4DhBE,MA1Df,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAsCJ,mBAASF,OAAOO,WAAW,GAAjE,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAa,iDAAG,uGACdL,EAAW,IAAIM,IAAOC,UAAUC,aAAad,GACnDO,EAAYD,GAFQ,SAKGA,EAASS,KAAK,sBAAuB,IALxC,OAKdC,EALc,OAMpBX,EAAWW,EAAS,IANA,2CAAH,qDAoBnB,OAXAC,qBAAU,WACJjB,IACFA,EAASkB,GAAG,gBAAgB,WAC1BP,OAEFX,EAASkB,GAAG,mBAAmB,WAC7BP,UAGH,IAGD,gCACE,qBAAKQ,MAAO,CAACC,OAAQ,QAArB,SACE,wBACEC,QAASV,EACTQ,MAAO,CAACG,gBAAiB,OAAQC,QAAS,OAAQH,OAAQ,QAF5D,SAIGhB,GAAoB,8BAGzB,8BACE,cAACoB,EAAA,EAAD,CACEC,aAAcxB,OAAOO,WAAW,EAChCkB,SAAU,SAACC,EAAGC,GAAJ,OACRlB,EAAemB,OAAOD,KAExB,kBAAgB,kBAChBE,kBAAkB,OAClBC,IAAK,EACLC,IAAK/B,OAAOO,eAGhB,sBAAKW,MAAO,CAAEC,OAAQ,QAAtB,8BAAkDX,KAClD,qBAAKU,MAAO,CAACI,QAAS,OAAQU,MAAMxB,EAAaW,OAAQ,QAAzD,SACE,cAAC,IAAD,CACEc,OAAQC,uCACR7B,SAAUA,UC5CL8B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,EAAD,IACDC,SAASC,eAAe,SAMzBZ,M","file":"static/js/main.221bb113.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { BridgeWidget } from \"socket-bridge-widget\";\nimport { ethers } from \"ethers\";\nimport Slider from '@mui/material/Slider';\n\nlet ethereum = (window as any).ethereum;\n\nfunction App() {\n  const [address, setAddress] = useState('');\n  const [provider, setProvider] = useState({} as any);\n  const [widthWidget, setWidthWidget] = useState(window.innerWidth/2);\n\n  const connectWallet = async () => {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    setProvider(provider);\n\n    // MetaMask requires requesting permission to connect users accounts\n    const response = await provider.send(\"eth_requestAccounts\", []);\n    setAddress(response[0]);\n  }\n\n  useEffect(() => {\n    if (ethereum) {\n      ethereum.on('chainChanged', () => {\n        connectWallet();\n      })\n      ethereum.on('accountsChanged', () => {\n        connectWallet();\n      })\n    }\n  }, []);\n\n  return (\n    <div>\n      <div style={{margin: \"20px\"}}>\n        <button\n          onClick={connectWallet}\n          style={{backgroundColor: \"blue\", padding: \"12px\", margin: \"auto\"}}\n        >\n          {address ? address : 'Connect Metamask Wallet'}\n        </button>\n      </div>\n      <div>\n        <Slider\n          defaultValue={window.innerWidth/2}\n          onChange={(_, value) =>\n            setWidthWidget(Number(value))\n          }\n          aria-labelledby=\"discrete-slider\"\n          valueLabelDisplay=\"auto\"\n          min={1}\n          max={window.innerWidth}\n        />\n      </div>\n      <div style={{ margin: \"20px\" }}>Width of Widget: {widthWidget}</div>\n      <div style={{padding: \"20px\", width:widthWidget, margin: \"auto\"}}>\n        <BridgeWidget\n          apiKey={process.env.REACT_APP_SOCKET_API_KEY}\n          provider={provider}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t\t<App />,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}